apply plugin:'java'

configurations{
	emma
}

dependencies{
	emma "emma:emma:2.1.5320"
  	emma "emma:emma_ant:2.1.5320"
}

def emmaConvention = new EmmaPluginConvention(project)
project.convention.plugins.emma = emmaConvention

class EmmaPluginConvention{
	def verbosityLevel = "info" 
	def reportPath;
	def coverageFileName;
	def tmpDir;
	def instrDir;
	def metaDataFilePath;
	def coverageOutFilePath;
	
	def emma(Closure close){
		close.delegate = this;
		close.run()
	}
	
	EmmaPluginConvention(Project project){
		reportPath 			= "${project.reportsDir.absolutePath}/emma"
		coverageFileName	= "coverage"
		tmpDir				= "${project.buildDir}/tmp/emma"
		instrDir			= "${tmpDir}/instr"
		metaDataFilePath 	= "${tmpDir}/${coverageFileName}.em"
		coverageOutFilePath = "${tmpDir}/${coverageFileName}.ec"
	}
}

test{
	//setup JVM Arguments for emma coverage - changed to output both files for dumping metrics to tools like Sonar
	jvmArgs "-XX:-UseSplitVerifier", "-Demma.coverage.out.file=${emmaConvention.coverageOutFilePath}" ,"-Demma.coverage.out.merge=true", "-Demma.metadata.out.file=${emmaConvention.metaDataFilePath}","-Demma.metadata.out.merge=true"
	
	//add 
	doFirst{
       	logger.lifecycle("Instrumenting the classes at " + sourceSets.main.output.classesDir.absolutePath)
       	// define the custom EMMA ant tasks
		ant.taskdef( resource:"emma_ant.properties", classpath: configurations.emma.asPath)
		ant.path(id:"run.classpath"){
          		pathelement(location:sourceSets.main.output.classesDir.absolutePath)
		}
		ant.emma(verbosity:"${emmaConvention.verbosityLevel}"){
			instr(merge:"true", destdir:"${emmaConvention.instrDir}", instrpathref:"run.classpath", metadatafile:"${emmaConvention.metaDataFilePath}"){
				instrpath{
					fileset(dir:sourceSets.main.output.classesDir.absolutePath, includes:"**/*.class")
				}
			}
		}
		setClasspath(files("${emmaConvention.instrDir}") + configurations.emma +  getClasspath())
	}
	
	doLast{
		ant.path(id:"src.path"){
			sourceSets.main.java.srcDirs.each{
				pathelement(location:it.absolutePath ) 
			}
		}
		ant.emma(enabled:"true"){
			
			report(sourcepathref:"src.path"){
				fileset(dir:"${emmaConvention.tmpDir}"){
					include(name:"*.e*")
				}
				txt(outfile:"${emmaConvention.reportPath}/${emmaConvention.coverageFileName}.txt")
				html(outfile:"${emmaConvention.reportPath}/${emmaConvention.coverageFileName}.html")
				xml(outfile:"${emmaConvention.reportPath}/${emmaConvention.coverageFileName}.xml")
			}
		}
 		logger.lifecycle("Test coverage reports available at ${emmaConvention.reportPath}.")
       	logger.lifecycle("txt: ${emmaConvention.reportPath}/${emmaConvention.coverageFileName}.txt")
       	logger.lifecycle("html: ${emmaConvention.reportPath}/${emmaConvention.coverageFileName}.html")
       	logger.lifecycle("xml ${emmaConvention.reportPath}/${emmaConvention.coverageFileName}.xml")
	}
}